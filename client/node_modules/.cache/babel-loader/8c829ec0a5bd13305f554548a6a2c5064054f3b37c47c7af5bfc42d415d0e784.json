{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kavya\\\\project\\\\Expression_Tracker_New\\\\client\\\\src\\\\components\\\\AdminApp\\\\AdminApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './AdminApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminDashboard() {\n  _s();\n  const [sessions, setSessions] = useState([]); // List of session IDs\n  const [sessionDetails, setSessionDetails] = useState({}); // Stores session dates and usernames\n\n  useEffect(() => {\n    fetchSessions();\n  }, []);\n\n  // Fetch sessions from the API\n  const fetchSessions = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/sessions'); // Update endpoint if needed\n      if (!response.ok) {\n        throw new Error('Failed to fetch sessions');\n      }\n      const data = await response.json();\n\n      // Assuming data includes both session IDs and a details object\n      setSessions(data.sessions || []);\n      setSessionDetails(data.sessionDetails || {}); // Format: { sessionId: { username: 'Name', createdDate: 'Date' } }\n    } catch (error) {\n      console.error('Error fetching sessions:', error);\n    }\n  };\n\n  // Handle button click to get analysis for a session\n  const handleSessionClick = sessionId => {\n    console.log(`Get Analysis for Session ID: ${sessionId}`);\n    // Add navigation or fetch logic for analysis here\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"sessions-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Session ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Created Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: sessions.length > 0 ? sessions.map(session => {\n            const details = sessionDetails[session] || {}; // Get details for the session ID\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: details.username || 'Unknown User'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: session\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: details.createdDate || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleSessionClick(session),\n                  className: \"get-analysis-btn\",\n                  children: \"Get Analysis\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 21\n              }, this)]\n            }, session, true, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 19\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"4\",\n              className: \"no-sessions\",\n              children: \"No sessions available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminDashboard, \"meZ8kdBZ/VwVM/fauuryjICjrfE=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AdminDashboard","_s","sessions","setSessions","sessionDetails","setSessionDetails","fetchSessions","response","fetch","ok","Error","data","json","error","console","handleSessionClick","sessionId","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","session","details","username","createdDate","onClick","colSpan","_c","$RefreshReg$"],"sources":["D:/Kavya/project/Expression_Tracker_New/client/src/components/AdminApp/AdminApp.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './AdminApp.css';\r\n\r\nfunction AdminDashboard() {\r\n  const [sessions, setSessions] = useState([]); // List of session IDs\r\n  const [sessionDetails, setSessionDetails] = useState({}); // Stores session dates and usernames\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, []);\r\n\r\n  // Fetch sessions from the API\r\n  const fetchSessions = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/sessions'); // Update endpoint if needed\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch sessions');\r\n      }\r\n      const data = await response.json();\r\n\r\n      // Assuming data includes both session IDs and a details object\r\n      setSessions(data.sessions || []);\r\n      setSessionDetails(data.sessionDetails || {}); // Format: { sessionId: { username: 'Name', createdDate: 'Date' } }\r\n    } catch (error) {\r\n      console.error('Error fetching sessions:', error);\r\n    }\r\n  };\r\n\r\n  // Handle button click to get analysis for a session\r\n  const handleSessionClick = (sessionId) => {\r\n    console.log(`Get Analysis for Session ID: ${sessionId}`);\r\n    // Add navigation or fetch logic for analysis here\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-app-container\">\r\n      <h2>Admin Dashboard</h2>\r\n      <div className=\"table-container\">\r\n        <table className=\"sessions-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Username</th>\r\n              <th>Session ID</th>\r\n              <th>Created Date</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sessions.length > 0 ? (\r\n              sessions.map((session) => {\r\n                const details = sessionDetails[session] || {}; // Get details for the session ID\r\n                return (\r\n                  <tr key={session}>\r\n                    <td>{details.username || 'Unknown User'}</td>\r\n                    <td>{session}</td>\r\n                    <td>{details.createdDate || 'N/A'}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => handleSessionClick(session)}\r\n                        className=\"get-analysis-btn\"\r\n                      >\r\n                        Get Analysis\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan=\"4\" className=\"no-sessions\">\r\n                  No sessions available.\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}