{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kavya\\\\project\\\\Expression_Tracker_New\\\\client\\\\src\\\\components\\\\AdminApp\\\\AdminApp.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\nimport \"./AdminApp.css\";\r\n\r\nfunction AdminApp() {\r\n  const [sessions, setSessions] = useState([]);\r\n  const [selectedSession, setSelectedSession] = useState(null);\r\n  const [analysisData, setAnalysisData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, []);\r\n\r\n  const fetchSessions = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/sessions\");\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch sessions\");\r\n      }\r\n      const data = await response.json();\r\n      setSessions(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching sessions:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSessionClick = async (sessionId) => {\r\n    setSelectedSession(sessionId);\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/analyze/${sessionId}`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      const data = await response.json();\r\n      setAnalysisData(data);\r\n    } catch (error) {\r\n      console.error(\"Error analyzing session:\", error);\r\n    }\r\n  };\r\n\r\n  const handleBackToSessions = () => {\r\n    setSelectedSession(null);\r\n    setAnalysisData(null);\r\n  };\r\n\r\n  const renderSessionList = () => (\r\n    <div style={{ width: \"100%\" }}>\r\n      <h3>Session List</h3>\r\n      {isLoading ? (\r\n        <p>Loading sessions...</p>\r\n      ) : (\r\n        <table className=\"session-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Username</th>\r\n              <th>Session ID</th>\r\n              <th>Date & Time</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sessions.map((user) => (\r\n              <React.Fragment key={user.username}>\r\n                {user.sessions.map((session, index) => (\r\n                  <tr key={session.sessionId}>\r\n                    {index === 0 && (\r\n                      <td rowSpan={user.sessions.length}>{user.username}</td>\r\n                    )}\r\n                    <td>{session.sessionId}</td>\r\n                    <td>\r\n                      {new Date(session.createdAt).toLocaleString()}\r\n                    </td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => handleSessionClick(session.sessionId)}\r\n                      >\r\n                        Get Analysis\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </React.Fragment>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const renderPieChart = () => {\r\n    if (\r\n      !analysisData ||\r\n      !analysisData.overallAnalysis ||\r\n      Object.keys(analysisData.overallAnalysis.emotions).length === 0\r\n    )\r\n      return null;\r\n\r\n    const emotions = analysisData.overallAnalysis.emotions;\r\n    const emotionLabelsWithEmojis = {\r\n      happy: \"😊 Happy\",\r\n      sad: \"😢 Sad\",\r\n      angry: \"😠 Angry\",\r\n      surprised: \"😮 Surprised\",\r\n      fearful: \"😨 Fearful\",\r\n      neutral: \"😐 Neutral\",\r\n      disgust: \"🤢 Disgust\",\r\n      fear: \"😨 Fear\",\r\n      surprise: \"😯 Surprise\",\r\n    };\r\n\r\n    const data = {\r\n      labels: Object.keys(emotions).map(\r\n        (emotion) => emotionLabelsWithEmojis[emotion] || emotion\r\n      ),\r\n      datasets: [\r\n        {\r\n          data: Object.values(emotions).map((v) => parseFloat(v)),\r\n          backgroundColor: [\r\n            \"#FF6384\",\r\n            \"#36A2EB\",\r\n            \"#FFCE56\",\r\n            \"#4BC0C0\",\r\n            \"#9966FF\",\r\n            \"#FF9F40\",\r\n            \"#C9CBCF\",\r\n          ],\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const options = {\r\n      responsive: true,\r\n      plugins: {\r\n        legend: {\r\n          position: \"right\",\r\n        },\r\n        title: {\r\n          display: true,\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <div className=\"pie-chart-container\">\r\n        <Pie data={data} options={options} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderTable = () => {\r\n    if (!analysisData || analysisData.imageAnalyses.length === 0) return null;\r\n\r\n    return (\r\n      <div className=\"table-container\">\r\n        <table className=\"analysis-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Webcam Capture</th>\r\n              <th>Game Screenshot</th>\r\n              <th>Analysis</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {analysisData.imageAnalyses.map((analysis, index) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  <img\r\n                    src={`http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath}`}\r\n                    alt={`Webcam ${index}`}\r\n                    className=\"webcam-image\"\r\n                    loading=\"lazy\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <img\r\n                    src={`http://localhost:5000/uploads/screenshots/${selectedSession}/${analysis.imagePath}`}\r\n                    alt={`Game Screenshot ${index}`}\r\n                    className=\"screenshot-image\"\r\n                    loading=\"lazy\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <h4>Emotion Analysis:</h4>\r\n                  {Object.entries(analysis.emotions).map(([emotion, value]) => (\r\n                    <div key={emotion}>\r\n                      <span>{emotion}:</span>\r\n                      <span>{parseFloat(value).toFixed(2)}%</span>\r\n                    </div>\r\n                  ))}\r\n                  <strong>Dominant Emotion: </strong>\r\n                  <span>{analysis.dominantEmotion}</span>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      <h2>Admin Dashboard</h2>\r\n      {selectedSession ? (\r\n        <div>\r\n          <h3>Analysis for Session: {selectedSession}</h3>\r\n          {renderPieChart()}\r\n          {renderTable()}\r\n          <button onClick={handleBackToSessions}>Back to Sessions</button>\r\n        </div>\r\n      ) : (\r\n        renderSessionList()\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminApp;*/\n\n/*import React, { useState, useEffect } from 'react';\r\nimport './AdminApp.css';\r\n\r\nfunction AdminDashboard() {\r\n  const [sessions, setSessions] = useState([]);\r\n  const [sessionDates, setSessionDates] = useState({});\r\n  const [usernames, setUsernames] = useState({}); // Object to store usernames by session ID\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, []);\r\n\r\n  // Fetch sessions from the API\r\n  const fetchSessions = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/sessions'); // Update the API endpoint if needed\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch sessions');\r\n      }\r\n      const data = await response.json();\r\n      setSessions(data.sessions || []);\r\n      setSessionDates(data.sessionDates || {});\r\n\r\n      // Assuming usernames are part of the API response\r\n      setUsernames(data.usernames || {}); // Structure: { sessionId: username }\r\n    } catch (error) {\r\n      console.error('Error fetching sessions:', error);\r\n    }\r\n  };\r\n\r\n  // Handle button click to get analysis for a session\r\n  const handleSessionClick = (sessionId) => {\r\n    console.log(`Get Analysis for Session ID: ${sessionId}`);\r\n    // Add navigation or fetch logic for analysis here\r\n  };\r\n\r\n  // Format the date string\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    const date = new Date(dateString);\r\n    return date.toLocaleString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-app-container\">\r\n      <h2>Admin Dashboard</h2>\r\n      <div className=\"table-container\">\r\n        <table className=\"sessions-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Username</th>\r\n              <th>Session ID</th>\r\n              <th>Created Date</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sessions.length > 0 ? (\r\n              sessions.map((session) => (\r\n                <tr key={session}>\r\n                  <td>{usernames[session] || 'Unknown User'}</td>\r\n                  <td>{session}</td>\r\n                  <td>{formatDate(sessionDates[session])}</td>\r\n                  <td>\r\n                    <button\r\n                      onClick={() => handleSessionClick(session)}\r\n                      className=\"get-analysis-btn\"\r\n                    >\r\n                      Get Analysis\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan=\"4\" className=\"no-sessions\">\r\n                  No sessions available.\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminDashboard;\r\n*/\n\n/*import React, { useState, useEffect } from 'react';\r\nimport './AdminApp.css';\r\n\r\nfunction AdminDashboard() {\r\n  const [sessions, setSessions] = useState([]);\r\n  const [sessionDates, setSessionDates] = useState({});\r\n  const [usernames, setUsernames] = useState({}); // Object to store usernames by session ID\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, []);\r\n\r\n  // Fetch sessions from the API\r\n  const fetchSessions = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/sessions'); // Update the API endpoint if needed\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch sessions');\r\n      }\r\n      const data = await response.json();\r\n      setSessions(data.sessions || []);\r\n      setSessionDates(data.sessionDates || {});\r\n      setUsernames(data.usernames || {}); // Structure: { sessionId: username }\r\n    } catch (error) {\r\n      console.error('Error fetching sessions:', error);\r\n    }\r\n  };\r\n\r\n  // Handle button click to get analysis for a session\r\n  const handleSessionClick = (sessionId) => {\r\n    console.log(`Get Analysis for Session ID: ${sessionId}`);\r\n    // Add navigation or fetch logic for analysis here\r\n  };\r\n\r\n  // Format the date string\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    const date = new Date(dateString);\r\n    return date.toLocaleString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-app-container\">\r\n      <h2>Admin Dashboard</h2>\r\n      <div className=\"table-container\">\r\n        <table className=\"sessions-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Username</th>\r\n              <th>Session ID</th>\r\n              <th>Created Date</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sessions.length > 0 ? (\r\n              sessions.map((session) => (\r\n                <tr key={session}>\r\n                  {/* Display the stored username from the usernames object *\r\n                  <td>{usernames[session] || 'Unknown User'}</td>\r\n                  <td>{session}</td>\r\n                  <td>{formatDate(sessionDates[session])}</td>\r\n                  <td>\r\n                    <button\r\n                      onClick={() => handleSessionClick(session)}\r\n                      className=\"get-analysis-btn\"\r\n                    >\r\n                      Get Analysis\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan=\"4\" className=\"no-sessions\">\r\n                  No sessions available.\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminDashboard; */\n\nimport React, { useState, useEffect } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport \"./AdminApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminApp() {\n  _s();\n  const [sessions, setSessions] = useState([]);\n  const [selectedSession, setSelectedSession] = useState(null);\n  const [analysisData, setAnalysisData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    fetchSessions();\n  }, []);\n  const fetchSessions = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"http://localhost:5000/api/sessions\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch sessions\");\n      }\n      const data = await response.json();\n      setSessions(data); // Assuming the API sends a list of users with sessions\n    } catch (error) {\n      console.error(\"Error fetching sessions:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSessionClick = async sessionId => {\n    setSelectedSession(sessionId);\n    try {\n      const response = await fetch(`http://localhost:5000/analyze/${sessionId}`);\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      const data = await response.json();\n      setAnalysisData(data);\n    } catch (error) {\n      console.error(\"Error analyzing session:\", error);\n    }\n  };\n  const handleBackToSessions = () => {\n    setSelectedSession(null);\n    setAnalysisData(null);\n  };\n  const renderSessionList = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Session List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading sessions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"session-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Session ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date & Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: sessions.map(user => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: user.sessions.map((session, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [index === 0 && /*#__PURE__*/_jsxDEV(\"td\", {\n              rowSpan: user.sessions.length,\n              children: user.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: session.sessionId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(session.createdAt).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleSessionClick(session.sessionId),\n                children: \"Get Analysis\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 21\n            }, this)]\n          }, session.sessionId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 19\n          }, this))\n        }, user.username, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 459,\n    columnNumber: 5\n  }, this);\n\n  // Pie chart rendering (no changes here)\n  const renderPieChart = () => {\n    if (!analysisData || !analysisData.overallAnalysis || Object.keys(analysisData.overallAnalysis.emotions).length === 0) return null;\n    const emotions = analysisData.overallAnalysis.emotions;\n    const emotionLabelsWithEmojis = {\n      happy: \"😊 Happy\",\n      sad: \"😢 Sad\",\n      angry: \"😠 Angry\",\n      surprised: \"😮 Surprised\",\n      fearful: \"😨 Fearful\",\n      neutral: \"😐 Neutral\",\n      disgust: \"🤢 Disgust\",\n      fear: \"😨 Fear\",\n      surprise: \"😯 Surprise\"\n    };\n    const data = {\n      labels: Object.keys(emotions).map(emotion => emotionLabelsWithEmojis[emotion] || emotion),\n      datasets: [{\n        data: Object.values(emotions).map(v => parseFloat(v)),\n        backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#4BC0C0\", \"#9966FF\", \"#FF9F40\", \"#C9CBCF\"],\n        borderWidth: 1\n      }]\n    };\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: \"right\"\n        },\n        title: {\n          display: true\n        }\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pie-chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Pie, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the analysis table (no changes here)\n  const renderTable = () => {\n    if (!analysisData || analysisData.imageAnalyses.length === 0) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"analysis-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Webcam Capture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Game Screenshot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: analysisData.imageAnalyses.map((analysis, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath}`,\n                alt: `Webcam ${index}`,\n                className: \"webcam-image\",\n                loading: \"lazy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `http://localhost:5000/uploads/screenshots/${selectedSession}/${analysis.imagePath}`,\n                alt: `Game Screenshot ${index}`,\n                className: \"screenshot-image\",\n                loading: \"lazy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 591,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Emotion Analysis:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 19\n              }, this), Object.entries(analysis.emotions).map(([emotion, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [emotion, \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 602,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [parseFloat(value).toFixed(2), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 603,\n                  columnNumber: 23\n                }, this)]\n              }, emotion, true, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Dominant Emotion: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: analysis.dominantEmotion\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 607,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 7\n    }, this), selectedSession ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Analysis for Session: \", selectedSession]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 11\n      }, this), renderPieChart(), renderTable(), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToSessions,\n        children: \"Back to Sessions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 9\n    }, this) : renderSessionList()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 618,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminApp, \"lZGRzQfUV0XW+Y7+C/Ss7x5YN04=\");\n_c = AdminApp;\nexport default AdminApp;\nvar _c;\n$RefreshReg$(_c, \"AdminApp\");","map":{"version":3,"names":["React","useState","useEffect","Pie","jsxDEV","_jsxDEV","AdminApp","_s","sessions","setSessions","selectedSession","setSelectedSession","analysisData","setAnalysisData","isLoading","setIsLoading","fetchSessions","response","fetch","ok","Error","data","json","error","console","handleSessionClick","sessionId","handleBackToSessions","renderSessionList","style","width","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","user","Fragment","session","index","rowSpan","length","username","Date","createdAt","toLocaleString","onClick","renderPieChart","overallAnalysis","Object","keys","emotions","emotionLabelsWithEmojis","happy","sad","angry","surprised","fearful","neutral","disgust","fear","surprise","labels","emotion","datasets","values","v","parseFloat","backgroundColor","borderWidth","options","responsive","plugins","legend","position","title","display","renderTable","imageAnalyses","analysis","src","imagePath","alt","loading","entries","value","toFixed","dominantEmotion","_c","$RefreshReg$"],"sources":["D:/Kavya/project/Expression_Tracker_New/client/src/components/AdminApp/AdminApp.js"],"sourcesContent":["/*import React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\nimport \"./AdminApp.css\";\r\n\r\nfunction AdminApp() {\r\n  const [sessions, setSessions] = useState([]);\r\n  const [selectedSession, setSelectedSession] = useState(null);\r\n  const [analysisData, setAnalysisData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, []);\r\n\r\n  const fetchSessions = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/sessions\");\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch sessions\");\r\n      }\r\n      const data = await response.json();\r\n      setSessions(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching sessions:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSessionClick = async (sessionId) => {\r\n    setSelectedSession(sessionId);\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/analyze/${sessionId}`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      const data = await response.json();\r\n      setAnalysisData(data);\r\n    } catch (error) {\r\n      console.error(\"Error analyzing session:\", error);\r\n    }\r\n  };\r\n\r\n  const handleBackToSessions = () => {\r\n    setSelectedSession(null);\r\n    setAnalysisData(null);\r\n  };\r\n\r\n  const renderSessionList = () => (\r\n    <div style={{ width: \"100%\" }}>\r\n      <h3>Session List</h3>\r\n      {isLoading ? (\r\n        <p>Loading sessions...</p>\r\n      ) : (\r\n        <table className=\"session-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Username</th>\r\n              <th>Session ID</th>\r\n              <th>Date & Time</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sessions.map((user) => (\r\n              <React.Fragment key={user.username}>\r\n                {user.sessions.map((session, index) => (\r\n                  <tr key={session.sessionId}>\r\n                    {index === 0 && (\r\n                      <td rowSpan={user.sessions.length}>{user.username}</td>\r\n                    )}\r\n                    <td>{session.sessionId}</td>\r\n                    <td>\r\n                      {new Date(session.createdAt).toLocaleString()}\r\n                    </td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => handleSessionClick(session.sessionId)}\r\n                      >\r\n                        Get Analysis\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </React.Fragment>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const renderPieChart = () => {\r\n    if (\r\n      !analysisData ||\r\n      !analysisData.overallAnalysis ||\r\n      Object.keys(analysisData.overallAnalysis.emotions).length === 0\r\n    )\r\n      return null;\r\n\r\n    const emotions = analysisData.overallAnalysis.emotions;\r\n    const emotionLabelsWithEmojis = {\r\n      happy: \"😊 Happy\",\r\n      sad: \"😢 Sad\",\r\n      angry: \"😠 Angry\",\r\n      surprised: \"😮 Surprised\",\r\n      fearful: \"😨 Fearful\",\r\n      neutral: \"😐 Neutral\",\r\n      disgust: \"🤢 Disgust\",\r\n      fear: \"😨 Fear\",\r\n      surprise: \"😯 Surprise\",\r\n    };\r\n\r\n    const data = {\r\n      labels: Object.keys(emotions).map(\r\n        (emotion) => emotionLabelsWithEmojis[emotion] || emotion\r\n      ),\r\n      datasets: [\r\n        {\r\n          data: Object.values(emotions).map((v) => parseFloat(v)),\r\n          backgroundColor: [\r\n            \"#FF6384\",\r\n            \"#36A2EB\",\r\n            \"#FFCE56\",\r\n            \"#4BC0C0\",\r\n            \"#9966FF\",\r\n            \"#FF9F40\",\r\n            \"#C9CBCF\",\r\n          ],\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const options = {\r\n      responsive: true,\r\n      plugins: {\r\n        legend: {\r\n          position: \"right\",\r\n        },\r\n        title: {\r\n          display: true,\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <div className=\"pie-chart-container\">\r\n        <Pie data={data} options={options} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderTable = () => {\r\n    if (!analysisData || analysisData.imageAnalyses.length === 0) return null;\r\n\r\n    return (\r\n      <div className=\"table-container\">\r\n        <table className=\"analysis-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Webcam Capture</th>\r\n              <th>Game Screenshot</th>\r\n              <th>Analysis</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {analysisData.imageAnalyses.map((analysis, index) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  <img\r\n                    src={`http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath}`}\r\n                    alt={`Webcam ${index}`}\r\n                    className=\"webcam-image\"\r\n                    loading=\"lazy\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <img\r\n                    src={`http://localhost:5000/uploads/screenshots/${selectedSession}/${analysis.imagePath}`}\r\n                    alt={`Game Screenshot ${index}`}\r\n                    className=\"screenshot-image\"\r\n                    loading=\"lazy\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <h4>Emotion Analysis:</h4>\r\n                  {Object.entries(analysis.emotions).map(([emotion, value]) => (\r\n                    <div key={emotion}>\r\n                      <span>{emotion}:</span>\r\n                      <span>{parseFloat(value).toFixed(2)}%</span>\r\n                    </div>\r\n                  ))}\r\n                  <strong>Dominant Emotion: </strong>\r\n                  <span>{analysis.dominantEmotion}</span>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      <h2>Admin Dashboard</h2>\r\n      {selectedSession ? (\r\n        <div>\r\n          <h3>Analysis for Session: {selectedSession}</h3>\r\n          {renderPieChart()}\r\n          {renderTable()}\r\n          <button onClick={handleBackToSessions}>Back to Sessions</button>\r\n        </div>\r\n      ) : (\r\n        renderSessionList()\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminApp;*/\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport './AdminApp.css';\r\n\r\nfunction AdminDashboard() {\r\n  const [sessions, setSessions] = useState([]);\r\n  const [sessionDates, setSessionDates] = useState({});\r\n  const [usernames, setUsernames] = useState({}); // Object to store usernames by session ID\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, []);\r\n\r\n  // Fetch sessions from the API\r\n  const fetchSessions = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/sessions'); // Update the API endpoint if needed\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch sessions');\r\n      }\r\n      const data = await response.json();\r\n      setSessions(data.sessions || []);\r\n      setSessionDates(data.sessionDates || {});\r\n\r\n      // Assuming usernames are part of the API response\r\n      setUsernames(data.usernames || {}); // Structure: { sessionId: username }\r\n    } catch (error) {\r\n      console.error('Error fetching sessions:', error);\r\n    }\r\n  };\r\n\r\n  // Handle button click to get analysis for a session\r\n  const handleSessionClick = (sessionId) => {\r\n    console.log(`Get Analysis for Session ID: ${sessionId}`);\r\n    // Add navigation or fetch logic for analysis here\r\n  };\r\n\r\n  // Format the date string\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    const date = new Date(dateString);\r\n    return date.toLocaleString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-app-container\">\r\n      <h2>Admin Dashboard</h2>\r\n      <div className=\"table-container\">\r\n        <table className=\"sessions-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Username</th>\r\n              <th>Session ID</th>\r\n              <th>Created Date</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sessions.length > 0 ? (\r\n              sessions.map((session) => (\r\n                <tr key={session}>\r\n                  <td>{usernames[session] || 'Unknown User'}</td>\r\n                  <td>{session}</td>\r\n                  <td>{formatDate(sessionDates[session])}</td>\r\n                  <td>\r\n                    <button\r\n                      onClick={() => handleSessionClick(session)}\r\n                      className=\"get-analysis-btn\"\r\n                    >\r\n                      Get Analysis\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan=\"4\" className=\"no-sessions\">\r\n                  No sessions available.\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminDashboard;\r\n*/\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport './AdminApp.css';\r\n\r\nfunction AdminDashboard() {\r\n  const [sessions, setSessions] = useState([]);\r\n  const [sessionDates, setSessionDates] = useState({});\r\n  const [usernames, setUsernames] = useState({}); // Object to store usernames by session ID\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, []);\r\n\r\n  // Fetch sessions from the API\r\n  const fetchSessions = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/sessions'); // Update the API endpoint if needed\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch sessions');\r\n      }\r\n      const data = await response.json();\r\n      setSessions(data.sessions || []);\r\n      setSessionDates(data.sessionDates || {});\r\n      setUsernames(data.usernames || {}); // Structure: { sessionId: username }\r\n    } catch (error) {\r\n      console.error('Error fetching sessions:', error);\r\n    }\r\n  };\r\n\r\n  // Handle button click to get analysis for a session\r\n  const handleSessionClick = (sessionId) => {\r\n    console.log(`Get Analysis for Session ID: ${sessionId}`);\r\n    // Add navigation or fetch logic for analysis here\r\n  };\r\n\r\n  // Format the date string\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    const date = new Date(dateString);\r\n    return date.toLocaleString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-app-container\">\r\n      <h2>Admin Dashboard</h2>\r\n      <div className=\"table-container\">\r\n        <table className=\"sessions-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Username</th>\r\n              <th>Session ID</th>\r\n              <th>Created Date</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sessions.length > 0 ? (\r\n              sessions.map((session) => (\r\n                <tr key={session}>\r\n                  {/* Display the stored username from the usernames object *\r\n                  <td>{usernames[session] || 'Unknown User'}</td>\r\n                  <td>{session}</td>\r\n                  <td>{formatDate(sessionDates[session])}</td>\r\n                  <td>\r\n                    <button\r\n                      onClick={() => handleSessionClick(session)}\r\n                      className=\"get-analysis-btn\"\r\n                    >\r\n                      Get Analysis\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan=\"4\" className=\"no-sessions\">\r\n                  No sessions available.\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminDashboard; */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\nimport \"./AdminApp.css\";\r\n\r\nfunction AdminApp() {\r\n  const [sessions, setSessions] = useState([]);\r\n  const [selectedSession, setSelectedSession] = useState(null);\r\n  const [analysisData, setAnalysisData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, []);\r\n\r\n  const fetchSessions = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/api/sessions\");\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch sessions\");\r\n      }\r\n      const data = await response.json();\r\n      setSessions(data);  // Assuming the API sends a list of users with sessions\r\n    } catch (error) {\r\n      console.error(\"Error fetching sessions:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSessionClick = async (sessionId) => {\r\n    setSelectedSession(sessionId);\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/analyze/${sessionId}`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      const data = await response.json();\r\n      setAnalysisData(data);\r\n    } catch (error) {\r\n      console.error(\"Error analyzing session:\", error);\r\n    }\r\n  };\r\n\r\n  const handleBackToSessions = () => {\r\n    setSelectedSession(null);\r\n    setAnalysisData(null);\r\n  };\r\n\r\n  const renderSessionList = () => (\r\n    <div style={{ width: \"100%\" }}>\r\n      <h3>Session List</h3>\r\n      {isLoading ? (\r\n        <p>Loading sessions...</p>\r\n      ) : (\r\n        <table className=\"session-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Username</th>\r\n              <th>Session ID</th>\r\n              <th>Date & Time</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sessions.map((user) => (\r\n              <React.Fragment key={user.username}>\r\n                {user.sessions.map((session, index) => (\r\n                  <tr key={session.sessionId}>\r\n                    {/* Add the username display here */}\r\n                    {index === 0 && (\r\n                      <td rowSpan={user.sessions.length}>{user.username}</td>\r\n                    )}\r\n                    <td>{session.sessionId}</td>\r\n                    <td>\r\n                      {new Date(session.createdAt).toLocaleString()}\r\n                    </td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => handleSessionClick(session.sessionId)}\r\n                      >\r\n                        Get Analysis\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </React.Fragment>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  // Pie chart rendering (no changes here)\r\n  const renderPieChart = () => {\r\n    if (\r\n      !analysisData ||\r\n      !analysisData.overallAnalysis ||\r\n      Object.keys(analysisData.overallAnalysis.emotions).length === 0\r\n    )\r\n      return null;\r\n\r\n    const emotions = analysisData.overallAnalysis.emotions;\r\n    const emotionLabelsWithEmojis = {\r\n      happy: \"😊 Happy\",\r\n      sad: \"😢 Sad\",\r\n      angry: \"😠 Angry\",\r\n      surprised: \"😮 Surprised\",\r\n      fearful: \"😨 Fearful\",\r\n      neutral: \"😐 Neutral\",\r\n      disgust: \"🤢 Disgust\",\r\n      fear: \"😨 Fear\",\r\n      surprise: \"😯 Surprise\",\r\n    };\r\n\r\n    const data = {\r\n      labels: Object.keys(emotions).map(\r\n        (emotion) => emotionLabelsWithEmojis[emotion] || emotion\r\n      ),\r\n      datasets: [\r\n        {\r\n          data: Object.values(emotions).map((v) => parseFloat(v)),\r\n          backgroundColor: [\r\n            \"#FF6384\",\r\n            \"#36A2EB\",\r\n            \"#FFCE56\",\r\n            \"#4BC0C0\",\r\n            \"#9966FF\",\r\n            \"#FF9F40\",\r\n            \"#C9CBCF\",\r\n          ],\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const options = {\r\n      responsive: true,\r\n      plugins: {\r\n        legend: {\r\n          position: \"right\",\r\n        },\r\n        title: {\r\n          display: true,\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <div className=\"pie-chart-container\">\r\n        <Pie data={data} options={options} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Render the analysis table (no changes here)\r\n  const renderTable = () => {\r\n    if (!analysisData || analysisData.imageAnalyses.length === 0) return null;\r\n\r\n    return (\r\n      <div className=\"table-container\">\r\n        <table className=\"analysis-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Webcam Capture</th>\r\n              <th>Game Screenshot</th>\r\n              <th>Analysis</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {analysisData.imageAnalyses.map((analysis, index) => (\r\n              <tr key={index}>\r\n                <td>\r\n                  <img\r\n                    src={`http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath}`}\r\n                    alt={`Webcam ${index}`}\r\n                    className=\"webcam-image\"\r\n                    loading=\"lazy\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <img\r\n                    src={`http://localhost:5000/uploads/screenshots/${selectedSession}/${analysis.imagePath}`}\r\n                    alt={`Game Screenshot ${index}`}\r\n                    className=\"screenshot-image\"\r\n                    loading=\"lazy\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <h4>Emotion Analysis:</h4>\r\n                  {Object.entries(analysis.emotions).map(([emotion, value]) => (\r\n                    <div key={emotion}>\r\n                      <span>{emotion}:</span>\r\n                      <span>{parseFloat(value).toFixed(2)}%</span>\r\n                    </div>\r\n                  ))}\r\n                  <strong>Dominant Emotion: </strong>\r\n                  <span>{analysis.dominantEmotion}</span>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      <h2>Admin Dashboard</h2>\r\n      {selectedSession ? (\r\n        <div>\r\n          <h3>Analysis for Session: {selectedSession}</h3>\r\n          {renderPieChart()}\r\n          {renderTable()}\r\n          <button onClick={handleBackToSessions}>Back to Sessions</button>\r\n        </div>\r\n      ) : (\r\n        renderSessionList()\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminApp;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}