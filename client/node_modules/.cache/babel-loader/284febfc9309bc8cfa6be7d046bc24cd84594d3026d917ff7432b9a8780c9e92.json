{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\Webcapture_part\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState, useRef } from 'react';\n// import html2canvas from 'html2canvas';\n// import { uploadImages } from '../services/api.js';  // Import your API function\n\n// const ImageCapture = () => {\n//     const [screenshot, setScreenshot] = useState(null);\n//     const [webcamImage, setWebcamImage] = useState(null);\n//     const videoRef = useRef(null);\n//     const [sessionId, setSessionId] = useState(null);\n//     const capturingRef = useRef(false); // Prevent double captures\n\n//     // Function to capture a screenshot with reduced resolution and compression\n//     const captureScreenshot = async () => {\n//         const canvas = await html2canvas(document.body, { scale: 0.4 }); // Reduce resolution by 40%\n//         canvas.toBlob(blob => {\n//             const file = new File([blob], 'screenshot.jpg', { type: 'image/jpeg' });\n//             setScreenshot(file); // Save as JPEG with compression\n//         }, 'image/jpeg', 0.6); // JPEG with 0.6 quality for further compression\n//     };\n\n//     // Function to capture webcam image with reduced resolution and compression\n//     const captureWebcamImage = () => {\n//         if (videoRef.current) {\n//             const canvas = document.createElement('canvas');\n//             canvas.width = videoRef.current.videoWidth * 0.4; // Reduce resolution by 60%\n//             canvas.height = videoRef.current.videoHeight * 0.4;\n//             const ctx = canvas.getContext('2d');\n//             ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n//             canvas.toBlob(blob => {\n//                 const file = new File([blob], 'webcam.jpg', { type: 'image/jpeg' });\n//                 setWebcamImage(file); // Save as JPEG with compression\n//             }, 'image/jpeg', 0.6); // JPEG with 0.6 quality for further compression\n//         }\n//     };\n\n//     // Single capture handler to avoid multiple triggers\n//     const captureImages = () => {\n//         if (!capturingRef.current) { // Check if capturing is already in progress\n//             capturingRef.current = true; // Lock capture to prevent double executions\n//             captureScreenshot();\n//             captureWebcamImage();\n//             setTimeout(() => {\n//                 capturingRef.current = false; // Unlock capture after 1 second\n//             }, 1000); // Small delay to ensure no double captures\n//         }\n//     };\n\n//     // Upload images when both are ready\n//     useEffect(() => {\n//         const upload = async () => {\n//             if (screenshot && webcamImage && sessionId) {\n//                 try {\n//                     await uploadImages(screenshot, webcamImage, sessionId);\n//                     console.log('Images uploaded successfully');\n//                     setScreenshot(null);  // Reset after upload\n//                     setWebcamImage(null);  // Reset after upload\n//                 } catch (error) {\n//                     console.error('Error uploading images:', error);\n//                 }\n//             }\n//         };\n//         upload();\n//     }, [screenshot, webcamImage, sessionId]);\n\n//     // Start webcam and create session ID on component mount (session starts)\n//     useEffect(() => {\n//         const startWebcam = async () => {\n//             try {\n//                 const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//                 if (videoRef.current) {\n//                     videoRef.current.srcObject = stream;\n//                 }\n//                 // Request server to create a new session and get the session ID\n//                 const response = await fetch('http://localhost:5000/start-session');\n//                 const data = await response.json();\n//                 setSessionId(data.sessionId);\n//             } catch (error) {\n//                 console.error('Error accessing webcam or creating session:', error);\n//             }\n//         };\n//         startWebcam();\n\n//         // Set an interval to capture images every 5 seconds\n//         const intervalId = setInterval(() => {\n//             captureImages(); // Call the single capture handler\n//         }, 5000);\n\n//         // Clear interval on component unmount\n//         return () => {\n//             clearInterval(intervalId);\n//         };\n//     }, []); // Empty dependency array ensures this effect only runs once\n\n//     return (\n//         <div>\n//             <video ref={videoRef} autoPlay style={{ display: 'none' }} /> {/* Hidden video element */}\n//         </div>\n//     );\n// };\n\n// export default ImageCapture;\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport html2canvas from 'html2canvas';\nimport { uploadImages } from '../services/api.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCapture = ({\n  sessionId,\n  isActive\n}) => {\n  _s();\n  const [screenshot, setScreenshot] = useState(null);\n  const [webcamImage, setWebcamImage] = useState(null);\n  const videoRef = useRef(null);\n  const capturingRef = useRef(false);\n  const streamRef = useRef(null);\n\n  // Function to capture a screenshot\n  const captureScreenshot = async () => {\n    const canvas = await html2canvas(document.body);\n    canvas.toBlob(blob => {\n      const file = new File([blob], 'screenshot.png', {\n        type: 'image/png'\n      });\n      setScreenshot(file);\n    }, 'image/png');\n  };\n\n  // Function to capture webcam image\n  const captureWebcamImage = () => {\n    if (videoRef.current) {\n      const canvas = document.createElement('canvas');\n      canvas.width = videoRef.current.videoWidth;\n      canvas.height = videoRef.current.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        const file = new File([blob], 'webcam.png', {\n          type: 'image/png'\n        });\n        setWebcamImage(file);\n      }, 'image/png');\n    }\n  };\n\n  // Single capture handler to avoid multiple triggers\n  const captureImages = () => {\n    if (!capturingRef.current && isActive) {\n      capturingRef.current = true;\n      captureScreenshot();\n      captureWebcamImage();\n      setTimeout(() => {\n        capturingRef.current = false;\n      }, 1000);\n    }\n  };\n\n  // Upload images when both are ready\n  useEffect(() => {\n    const upload = async () => {\n      if (screenshot && webcamImage && sessionId && isActive) {\n        try {\n          await uploadImages(screenshot, webcamImage, sessionId);\n          console.log('Images uploaded successfully');\n          setScreenshot(null);\n          setWebcamImage(null);\n        } catch (error) {\n          console.error('Error uploading images:', error);\n        }\n      }\n    };\n    upload();\n  }, [screenshot, webcamImage, sessionId, isActive]);\n\n  // Start/stop webcam based on isActive prop\n  useEffect(() => {\n    const startWebcam = async () => {\n      if (isActive) {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            video: true\n          });\n          streamRef.current = stream;\n          if (videoRef.current) {\n            videoRef.current.srcObject = stream;\n          }\n        } catch (error) {\n          console.error('Error accessing webcam:', error);\n        }\n      }\n    };\n    const stopWebcam = () => {\n      if (streamRef.current) {\n        const tracks = streamRef.current.getTracks();\n        tracks.forEach(track => track.stop());\n        streamRef.current = null;\n        if (videoRef.current) {\n          videoRef.current.srcObject = null;\n        }\n      }\n    };\n    if (isActive) {\n      startWebcam();\n    } else {\n      stopWebcam();\n    }\n    return () => {\n      stopWebcam();\n    };\n  }, [isActive]);\n\n  // Set up/clear interval based on isActive prop\n  useEffect(() => {\n    let intervalId;\n    if (isActive) {\n      intervalId = setInterval(() => {\n        captureImages();\n      }, 5000);\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [isActive]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageCapture, \"6Yy867jqhwSN5yhovxr/6M733Lg=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useState","useRef","html2canvas","uploadImages","jsxDEV","_jsxDEV","ImageCapture","sessionId","isActive","_s","screenshot","setScreenshot","webcamImage","setWebcamImage","videoRef","capturingRef","streamRef","captureScreenshot","canvas","document","body","toBlob","blob","file","File","type","captureWebcamImage","current","createElement","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","captureImages","setTimeout","upload","console","log","error","startWebcam","stream","navigator","mediaDevices","getUserMedia","video","srcObject","stopWebcam","tracks","getTracks","forEach","track","stop","intervalId","setInterval","clearInterval","children","ref","autoPlay","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["// import React, { useEffect, useState, useRef } from 'react';\r\n// import html2canvas from 'html2canvas';\r\n// import { uploadImages } from '../services/api.js';  // Import your API function\r\n\r\n// const ImageCapture = () => {\r\n//     const [screenshot, setScreenshot] = useState(null);\r\n//     const [webcamImage, setWebcamImage] = useState(null);\r\n//     const videoRef = useRef(null);\r\n//     const [sessionId, setSessionId] = useState(null);\r\n//     const capturingRef = useRef(false); // Prevent double captures\r\n\r\n//     // Function to capture a screenshot with reduced resolution and compression\r\n//     const captureScreenshot = async () => {\r\n//         const canvas = await html2canvas(document.body, { scale: 0.4 }); // Reduce resolution by 40%\r\n//         canvas.toBlob(blob => {\r\n//             const file = new File([blob], 'screenshot.jpg', { type: 'image/jpeg' });\r\n//             setScreenshot(file); // Save as JPEG with compression\r\n//         }, 'image/jpeg', 0.6); // JPEG with 0.6 quality for further compression\r\n//     };\r\n\r\n//     // Function to capture webcam image with reduced resolution and compression\r\n//     const captureWebcamImage = () => {\r\n//         if (videoRef.current) {\r\n//             const canvas = document.createElement('canvas');\r\n//             canvas.width = videoRef.current.videoWidth * 0.4; // Reduce resolution by 60%\r\n//             canvas.height = videoRef.current.videoHeight * 0.4;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n//             canvas.toBlob(blob => {\r\n//                 const file = new File([blob], 'webcam.jpg', { type: 'image/jpeg' });\r\n//                 setWebcamImage(file); // Save as JPEG with compression\r\n//             }, 'image/jpeg', 0.6); // JPEG with 0.6 quality for further compression\r\n//         }\r\n//     };\r\n\r\n//     // Single capture handler to avoid multiple triggers\r\n//     const captureImages = () => {\r\n//         if (!capturingRef.current) { // Check if capturing is already in progress\r\n//             capturingRef.current = true; // Lock capture to prevent double executions\r\n//             captureScreenshot();\r\n//             captureWebcamImage();\r\n//             setTimeout(() => {\r\n//                 capturingRef.current = false; // Unlock capture after 1 second\r\n//             }, 1000); // Small delay to ensure no double captures\r\n//         }\r\n//     };\r\n\r\n//     // Upload images when both are ready\r\n//     useEffect(() => {\r\n//         const upload = async () => {\r\n//             if (screenshot && webcamImage && sessionId) {\r\n//                 try {\r\n//                     await uploadImages(screenshot, webcamImage, sessionId);\r\n//                     console.log('Images uploaded successfully');\r\n//                     setScreenshot(null);  // Reset after upload\r\n//                     setWebcamImage(null);  // Reset after upload\r\n//                 } catch (error) {\r\n//                     console.error('Error uploading images:', error);\r\n//                 }\r\n//             }\r\n//         };\r\n//         upload();\r\n//     }, [screenshot, webcamImage, sessionId]);\r\n\r\n//     // Start webcam and create session ID on component mount (session starts)\r\n//     useEffect(() => {\r\n//         const startWebcam = async () => {\r\n//             try {\r\n//                 const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n//                 if (videoRef.current) {\r\n//                     videoRef.current.srcObject = stream;\r\n//                 }\r\n//                 // Request server to create a new session and get the session ID\r\n//                 const response = await fetch('http://localhost:5000/start-session');\r\n//                 const data = await response.json();\r\n//                 setSessionId(data.sessionId);\r\n//             } catch (error) {\r\n//                 console.error('Error accessing webcam or creating session:', error);\r\n//             }\r\n//         };\r\n//         startWebcam();\r\n\r\n//         // Set an interval to capture images every 5 seconds\r\n//         const intervalId = setInterval(() => {\r\n//             captureImages(); // Call the single capture handler\r\n//         }, 5000);\r\n\r\n//         // Clear interval on component unmount\r\n//         return () => {\r\n//             clearInterval(intervalId);\r\n//         };\r\n//     }, []); // Empty dependency array ensures this effect only runs once\r\n\r\n//     return (\r\n//         <div>\r\n//             <video ref={videoRef} autoPlay style={{ display: 'none' }} /> {/* Hidden video element */}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ImageCapture;\r\n\r\n\r\n\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport { uploadImages } from '../services/api.js';\r\n\r\nconst ImageCapture = ({ sessionId, isActive }) => {\r\n    const [screenshot, setScreenshot] = useState(null);\r\n    const [webcamImage, setWebcamImage] = useState(null);\r\n    const videoRef = useRef(null);\r\n    const capturingRef = useRef(false);\r\n    const streamRef = useRef(null);\r\n\r\n    // Function to capture a screenshot\r\n    const captureScreenshot = async () => {\r\n        const canvas = await html2canvas(document.body);\r\n        canvas.toBlob(blob => {\r\n            const file = new File([blob], 'screenshot.png', { type: 'image/png' });\r\n            setScreenshot(file);\r\n        }, 'image/png');\r\n    };\r\n\r\n    // Function to capture webcam image\r\n    const captureWebcamImage = () => {\r\n        if (videoRef.current) {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = videoRef.current.videoWidth;\r\n            canvas.height = videoRef.current.videoHeight;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n            canvas.toBlob(blob => {\r\n                const file = new File([blob], 'webcam.png', { type: 'image/png' });\r\n                setWebcamImage(file);\r\n            }, 'image/png');\r\n        }\r\n    };\r\n\r\n    // Single capture handler to avoid multiple triggers\r\n    const captureImages = () => {\r\n        if (!capturingRef.current && isActive) {\r\n            capturingRef.current = true;\r\n            captureScreenshot();\r\n            captureWebcamImage();\r\n            setTimeout(() => {\r\n                capturingRef.current = false;\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    // Upload images when both are ready\r\n    useEffect(() => {\r\n        const upload = async () => {\r\n            if (screenshot && webcamImage && sessionId && isActive) {\r\n                try {\r\n                    await uploadImages(screenshot, webcamImage, sessionId);\r\n                    console.log('Images uploaded successfully');\r\n                    setScreenshot(null);\r\n                    setWebcamImage(null);\r\n                } catch (error) {\r\n                    console.error('Error uploading images:', error);\r\n                }\r\n            }\r\n        };\r\n        upload();\r\n    }, [screenshot, webcamImage, sessionId, isActive]);\r\n\r\n    // Start/stop webcam based on isActive prop\r\n    useEffect(() => {\r\n        const startWebcam = async () => {\r\n            if (isActive) {\r\n                try {\r\n                    const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n                    streamRef.current = stream;\r\n                    if (videoRef.current) {\r\n                        videoRef.current.srcObject = stream;\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error accessing webcam:', error);\r\n                }\r\n            }\r\n        };\r\n\r\n        const stopWebcam = () => {\r\n            if (streamRef.current) {\r\n                const tracks = streamRef.current.getTracks();\r\n                tracks.forEach(track => track.stop());\r\n                streamRef.current = null;\r\n                if (videoRef.current) {\r\n                    videoRef.current.srcObject = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (isActive) {\r\n            startWebcam();\r\n        } else {\r\n            stopWebcam();\r\n        }\r\n\r\n        return () => {\r\n            stopWebcam();\r\n        };\r\n    }, [isActive]);\r\n\r\n    // Set up/clear interval based on isActive prop\r\n    useEffect(() => {\r\n        let intervalId;\r\n        \r\n        if (isActive) {\r\n            intervalId = setInterval(() => {\r\n                captureImages();\r\n            }, 5000);\r\n        }\r\n\r\n        return () => {\r\n            if (intervalId) {\r\n                clearInterval(intervalId);\r\n            }\r\n        };\r\n    }, [isActive]);\r\n\r\n    return (\r\n        <div>\r\n            <video ref={videoRef} autoPlay style={{ display: 'none' }} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageCapture;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}